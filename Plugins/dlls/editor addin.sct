<scriptlet>

<implements type="Automation" id="dispatcher">
	<property name="PluginEvent">
		<get/>
	</property>
	<property name="PluginDescription">
		<get/>
	</property>
	<property name="PluginExtendedProperties">
		<get/>
	</property>
	<property name="PluginFileFilters">
		<get/>
	</property>
	<property name="PluginArguments">
		<get/>
		<put/>
	</property>
	<property name="PluginVariables">
		<get/>
		<put/>
	</property>
	<method name="MakeUpper"/>
	<method name="MakeLower"/>
	<method name="RemoveDuplicates"/>
	<method name="CountDuplicates"/>
	<method name="SortAscending"/>
	<method name="SortDescending"/>
	<method name="ExecFilterCommand"/>
	<method name="Tokenize"/>
	<method name="Trim"/>
	<method name="SelectColumns"/>
	<method name="SelectLines"/>
</implements>

<script language="VBS">
Option Explicit

Const WinMergeRegKeyPath = "HKCU\Software\Thingamahoochie\WinMerge\"
Const PluginRegKeyPath = "HKCU\Software\Thingamahoochie\WinMerge\Plugins\editor addin.sct\"

Dim wsh: Set wsh = CreateObject("WScript.Shell")
Dim arguments: arguments = ""
Dim variables: variables = Array()

Function get_PluginEvent()
	get_PluginEvent = "EDITOR_SCRIPT"
End Function

Function get_PluginDescription()
	get_PluginDescription = "Basic text functions for the context menu"
End Function

Function get_PluginFileFilters()
	get_PluginFileFilters= ".*"
End Function

Function get_PluginExtendedProperties()
	get_PluginExtendedProperties = _
	"GenerateUnpacker;" & _
	"MakeUpper.MenuCaption=Make Uppercase;" & _
	"MakeUpper.Description=Make selection uppercase;" & _
	"MakeLower.MenuCaption=Make Lowercase;" & _
	"MakeLower.Description=Make selection lowercase;" & _
	"RemoveDuplicates.MenuCaption=Remove Duplicate Lines;" & _
	"RemoveDuplicates.Description=Remove duplicate lines;" & _
	"CountDuplicates.MenuCaption=Count Duplicate Lines;" & _
	"CountDuplicates.Description=Count duplicate lines;" & _
	"SortAscending.MenuCaption=Sort Lines Ascending;" & _
	"SortAscending.Description=Sort lines Ascending;" & _
	"SortDescending.MenuCaption=Sort Lines Descending;" & _
	"SortDescending.Description=Sort lines descending;" & _
	"ExecFilterCommand.MenuCaption=Apply Filter Command...;" & _
	"ExecFilterCommand.Description=Apply filter command. " & vbCrLf & "Arguments: filter command. %1 is replaced with the file name.;" & _
	"ExecFilterCommand.ArgumentsRequired;" & _
	"Tokenize.MenuCaption=Tokenize...;" & _
	"Tokenize.Description=Tokenize selection. " & vbCrLf & "Arguments: a regular expression for tokenizing. (e.g. [^\w]+);" & _
	"Tokenize.ArgumentsRequired;" & _
	"Trim.MenuCaption=Trim Spaces;" & _
	"Trim.Description=Trim spaces;" & _
	"SelectColumns.MenuCaption=Select Columns...;" & _
	"SelectColumns.Description=Select some columns." & vbCrLf & "Arguments: list of column ranges to select. (e.g. -3,5-10,30-);" & _
	"SelectColumns.ArgumentsRequired;" & _
	"SelectLines.MenuCaption=Select Lines...;" & _
	"SelectLines.Description=Select some lines." & vbCrLf & "Arguments: list of line ranges to select. (e.g. -3,5-10,30-);" & _
	"SelectLines.ArgumentsRequired;"
End Function

Function get_PluginArguments()
	get_PluginArguments = arguments
End Function

Sub put_PluginArguments(NewValue)
	arguments = NewValue
End Sub

Function get_PluginVariables()
	get_PluginVariables = Join(ariables, Chr(0))
End Function

Sub put_PluginVariables(NewValue)
	variables = Split(NewValue, Chr(0))
End Sub

Function regRead(Key, DefaultValue)
	regRead = DefaultValue
	On Error Resume Next
	regRead = wsh.RegRead(Key)
End Function

Function IsLangJapanese()
	Dim languageId
	On Error Resume Next
	languageId = CLng(regRead(WinMergeRegKeyPath & "Locale\LanguageId", 1033))
	IsLangJapanese = (languageId = 1041)
End Function

' transformation functions
Function MakeUpper(Text)
	MakeUpper = UCase(Text)
End Function

Function MakeLower(Text)
	MakeLower = LCase(Text)
End Function

Function ReplaceVariables(ByVal str)
	Dim newstr
	Dim pos
	Dim foundpos
	Dim ch
	pos = 1
	Do While True
		foundpos = InStr(pos, str, "%")
		If foundpos > 0 Then
			ch = Mid(str, foundpos + 1, 1)
			If ch = "%" Then
				newstr = newstr & "%"
				pos = foundpos + 2
			ElseIf IsNumeric(ch) Then
				newstr = newstr & Mid(str, pos, foundpos - pos)
				If CLng(ch) <= SafeUBound(variables) Then
					newstr = newstr & variables(CLng(ch))
				End If
				pos = foundpos + 2
			Else
				newstr = newstr & Mid(str, pos, foundpos - pos + 1)
				pos = foundpos + 1
			End If
		Else
			newstr = newstr & Mid(str, pos)
			Exit Do
		End If
	Loop
	ReplaceVariables = newstr
End Function

Function IsFirstArgumentEmpty()
	IsFirstArgumentEmpty = (Trim(arguments) = "")
End Function

Function ExecFilterCommand(Text)
	Dim cmd
	If IsFirstArgumentEmpty() Then
		cmd = regRead(PluginRegKeyPath & "ExecFilterCommand", "")
		If IsLangJapanese() Then
			cmd = InputBox("フィルタコマンドを入力してください", "ExecFilterCommand", cmd)
		Else
			cmd = InputBox("Enter filter command", "ExecFilterCommand", cmd)
		End If
		If cmd <> "" Then
			wsh.RegWrite PluginRegKeyPath & "ExecFilterCommand", cmd
		End If
		cmd = ReplaceVariables(cmd)
	Else
		cmd = arguments
	End If
	If cmd = "" Then
		If IsLangJapanese() Then
			Err.Raise 30001, , "キャンセルされました"
		Else
			Err.Raise 30001, , "Canceled"
		End If
		Exit Function
	End If

	On Error Resume Next

	Dim path
	path = wsh.ExpandEnvironmentStrings("%TEMP%\_winmerge_addin_temp_.txt")

	Dim fso
	Dim ts
	Set fso = CreateObject("Scripting.FileSystemObject")
	Set ts = fso.CreateTextFile(path)
	If ts Is Nothing Then
		Exit Function
	End If
	ts.Write Text
	ts.Close

	Dim exe
	Set exe = wsh.Exec("cmd /c type """ & path & """  | " & cmd & " 2>&1")
	If exe Is Nothing Then
		If IsLangJapanese() Then
			MsgBox "コマンド " & cmd & " の実行に失敗しました:" & Err.Description 
		Else
			MsgBox "Failed to execute the command '" & cmd & "':" & Err.Description 
		End If
		fso.DeleteFile path
		Exit Function
	End If

	ExecFilterCommand = ""
	Do Until exe.StdOut.AtEndOfStream
		ExecFilterCommand = ExecFilterCommand & exe.StdOut.ReadLine & vbCrLf
	Loop

	fso.DeleteFile path

End Function

Function SafeUBound(ary)
	SafeUBound = -1
	On Error Resume Next
	SafeUBound = UBound(ary)
End Function

Function ParseRanges(ByVal rangeText)
	Dim i, j
	Dim ary, ary2, aryRanges()
	Dim rangeFrom, rangeTo
	ary = Split(rangeText, ",")
	j = 0
	For i = 0 To SafeUBound(ary)
		ary2 = Split(ary(i), "-")
		rangeFrom = ""
		If SafeUBound(ary2) >= 0 Then
			rangeFrom = Trim(ary2(0))
		End If
		rangeTo = rangeFrom
		If SafeUBound(ary2) > 0 Then
			rangeTo = Trim(ary2(1))
		End If
		If IsNumeric(rangeFrom) Or IsNumeric(rangeTo) Then
			If Not IsNumeric(rangeFrom) Then rangeFrom = 1
			If Not IsNumeric(rangeTo)   Then rangeTo   = 1000000000
			If CDbl(rangeFrom) < 1 Or CDbl(rangeFrom) > 1000000000 Then rangeFrom = 1
			If CDbl(rangeTo)   < 1 Or CDbl(rangeTo)   > 1000000000 Then rangeTo   = 1
			If CDbl(rangeFrom) > CDbl(rangeTo) Then rangeTo = rangeFrom
			Redim preserve aryRanges(j)
			aryRanges(j) = Array(CLng(rangeFrom), CLng(rangeTo))
			j = j + 1
		End If
	Next
	ParseRanges = aryRanges
End Function

Function SelectColumns(Text)
	Dim rangesStr, ranges
	Dim re
	Dim matches
	Dim lines, eol, line
	Dim i, j
	If IsFirstArgumentEmpty() Then
		rangesStr = regRead(PluginRegKeyPath & "SelectColumns", "")
		If IsLangJapanese() Then
			rangesStr = InputBox("抽出する列番号または列番号の範囲を1つまたはカンマ区切りで複数指定してください (例: -3,5-10,30-):", "SelectColumns", ranges)
		Else
			rangesStr = InputBox("Enter the list of column ranges to select (e.g. -3,5-10,30-):", "SelectColumns", rangesStr)
		End If
		If rangesStr <> "" Then
			wsh.RegWrite PluginRegKeyPath & "SelectColumns", rangesStr
		End If
	Else
		rangesStr = arguments
	End If
	If rangesStr = "" Then
		If IsLangJapanese() Then
			Err.Raise 30001, , "キャンセルされました"
		Else
			Err.Raise 30001, , "Canceled"
		End If
		Exit Function
	End If
	ranges = ParseRanges(rangesStr)
	Set re = New RegExp
	re.Global = False
	re.IgnoreCase = False
	re.Pattern = "\r\n|\n|\r"
	Set matches = re.Execute(Text)
	If matches.Count > 0 Then
		eol = matches(0).Value
	End If
	lines = Split(Text, eol)
	For i = 0 To SafeUBound(lines)
		line = ""
		For j = 0 To SafeUBound(ranges) 
			If ranges(j)(0) <= Len(lines(i)) Then
				line = line & Mid(lines(i), ranges(j)(0), ranges(j)(1) - ranges(j)(0) + 1)
			End If
		Next
		lines(i) = line
	Next
	SelectColumns = Join(lines, eol)
End Function

Function SelectLines(Text)
	Dim rangesStr, ranges
	Dim re
	Dim matches
	Dim lines, newlines(), eol
	Dim i, j, k
	If IsFirstArgumentEmpty() Then
		rangesStr = regRead(PluginRegKeyPath & "SelectLines", "")
		If IsLangJapanese() Then
			rangesStr = InputBox("抽出する行番号または行番号の範囲を1つまたはカンマ区切りで複数指定してください (例: -3,5-10,30-):", "SelectLines", ranges)
		Else
			rangesStr = InputBox("Enter the list of line ranges to select (e.g. -3,5-10,30-):", "SelectLines", rangesStr)
		End If
		If rangesStr <> "" Then
			wsh.RegWrite PluginRegKeyPath & "SelectLines", rangesStr
		End If
	Else
		rangesStr = arguments
	End If
	If rangesStr = "" Then
		If IsLangJapanese() Then
			Err.Raise 30001, , "キャンセルされました"
		Else
			Err.Raise 30001, , "Canceled"
		End If
		Exit Function
	End If
	ranges = ParseRanges(rangesStr)
	Set re = New RegExp
	re.Global = False
	re.IgnoreCase = False
	re.Pattern = "\r\n|\n|\r"
	Set matches = re.Execute(Text)
	If matches.Count > 0 Then
		eol = matches(0).Value
	End If
	lines = Split(Text, eol)
	k = 0
	For i = 0 To SafeUBound(ranges) 
		For j = ranges(i)(0) - 1 To ranges(i)(1) - 1
			If j < SafeUBound(lines) Then
				ReDim Preserve newlines(k)
				newlines(k) = lines(j)
				k = k + 1
			End If
		Next
	Next
	If SafeUBound(lines) >= 0 Then
		If lines(SafeUBound(lines)) = "" Then
			ReDim Preserve newlines(k)
			newlines(k) = ""
			k = k + 1
		End If
	End If
	SelectLines = Join(newlines, eol)
End Function

' port from WinMerge2011
Function Tokenize(Text)
	Dim pattern
	If IsFirstArgumentEmpty() Then
		pattern = regRead(PluginRegKeyPath & "Tokenize", "")
		If IsLangJapanese() Then
			pattern = InputBox("トークン分割する区切りを正規表現で入力してください (例: [^\w]+):", "Tokenize", pattern)
		Else
			pattern = InputBox("Enter regex to tokenize (e.g. [^\w]+):", "Tokenize", pattern)
		End If
		If pattern <> "" Then
			wsh.RegWrite PluginRegKeyPath & "Tokenize", pattern
		End If
	Else
		pattern = arguments
	End If
	If pattern = "" Then
		If IsLangJapanese() Then
			Err.Raise 30001, , "キャンセルされました"
		Else
			Err.Raise 30001, , "Canceled"
		End If
		Exit Function
	End If
	Dim re
	Set re = New RegExp
	re.Global = True
	re.IgnoreCase = True
	re.Pattern = pattern
	Tokenize = re.Replace(Text, vbCrLf)
End Function

</script>

<script language="JScript">

function RemoveDuplicates(Text) {
	var eol = Text.match(/\r\n|\n|\r/);
	var lines = Text.split(eol);
	var newlines = new Array();
	var dic = {};
	var lasteol = false;

	if (!lines[lines.length - 1]) {
		lines.pop();
		lasteol = true;
	}
	for (var i = 0, j = 0; i < lines.length; i++) {
		var line = lines[i];
		if (typeof dic[line] === 'undefined') {
			dic[line] = 1;
			newlines[j] = line;
			j++;
		}
	}
	if (lasteol)
		newlines[j] = "";
	return newlines.join(eol);
}

function CountDuplicates(Text) {
	var eol = Text.match(/\r\n|\n|\r/);
	var lines = Text.split(eol);
	var newlines = new Array();
	var dic = {};

	if (!lines[lines.length - 1]) {
		lines.pop();
	}
	
	for (var i = 0; i < lines.length; i++) {
		var line = lines[i];
		if (typeof dic[line] === 'undefined') {
			dic[line] = 1;
			newlines[j] = line;
			j++;
		} else {
			dic[line]++;
		}
	}
	var j = 0;
	for (var line in dic) {
		newlines[j] = line + '\t' + dic[line];
		j++;
	}
	newlines[j] = "";
	return newlines.join(eol);
}

function SortAscending(Text) {
	var eol = Text.match(/\r\n|\n|\r/);
	var lines = Text.split(eol);

	if (lines.length == 1) {
		return Text;
	} else if (lines[lines.length - 1] == "") {
		lines.pop();
		return lines.sort().join(eol) + eol;
	} else {
		return lines.sort().join(eol);
	}
}

function SortDescending(Text) {
	var eol = Text.match(/\r\n|\n|\r/);
	var lines = Text.split(eol);

	if (lines.length == 1) {
		return Text;
	} else if (lines[lines.length - 1] == "") {
		lines.pop();
		lines.sort(function(a, b) { return a < b ? 1 : -1; });
		return lines.join(eol) + eol;
	} else {
		return lines.sort(function(a, b) { return a < b ? 1 : -1; }).join(eol);
	}
}

function Trim(Text) {
	var eol = Text.match(/\r\n|\n|\r/);
	var lines = Text.split(eol);
	for (var i = 0; i < lines.length; i++) {
		lines[i] = lines[i].replace(/^\s+|\s+$/g, "");
	}
	return lines.join(eol);
}

</script>

</scriptlet>
