<scriptlet>
<implements type="Automation" id="dispatcher">
  <property name="PluginEvent">
    <get/>
  </property>
  <property name="PluginDescription">
    <get/>
  </property>
  <property name="PluginExtendedProperties">
    <get/>
  </property>
  <property name="PluginFileFilters">
    <get/>
  </property>
  <property name="PluginArguments">
    <get/>
    <put/>
  </property>
  <property name="PluginVariables">
    <get/>
    <put/>
  </property>
  <method name="PluginOnEvent"/>
  <method name="ExecFilterCommand"/>
  <method name="MakeUpper"/>
  <method name="MakeLower"/>
  <method name="RemoveDuplicates"/>
  <method name="CountDuplicates"/>
  <method name="SortAscending"/>
  <method name="SortDescending"/>
  <method name="ReverseColumns"/>
  <method name="ReverseLines"/>
  <method name="SelectColumns"/>
  <method name="SelectLines"/>
  <method name="Replace" internalName="ReplaceText"/>
  <method name="Tokenize"/>
  <method name="Trim"/>
</implements>

<script language="JScript">

var REGKEY_PATH = "Plugins\\editor addin.sct/";

var wsh = new ActiveXObject("WScript.Shell")
var arguments = "";
var variables = new Array();
var mergeApp;

function get_PluginEvent() {
  return "EDITOR_SCRIPT";
}

function get_PluginDescription() {
  return "Basic text functions for the context menu";
}

function get_PluginFileFilters() {
  return ".*";
}

function get_PluginExtendedProperties() {
  return "GenerateUnpacker;" + 
  "MakeUpper.MenuCaption=Make Uppercase;" + 
  "MakeUpper.Description=Make characters uppercase;" + 
  "MakeLower.MenuCaption=Make Lowercase;" + 
  "MakeLower.Description=Make characters lowercase;" + 
  "RemoveDuplicates.MenuCaption=Remove Duplicate Lines;" + 
  "RemoveDuplicates.Description=Remove duplicate lines;" + 
  "CountDuplicates.MenuCaption=Count Duplicate Lines;" + 
  "CountDuplicates.Description=Count duplicate lines;" + 
  "SortAscending.MenuCaption=Sort Lines Ascending;" + 
  "SortAscending.Description=Sort lines ascending;" + 
  "SortDescending.MenuCaption=Sort Lines Descending;" + 
  "SortDescending.Description=Sort lines descending;" + 
  "ExecFilterCommand.MenuCaption=Apply Filter Command...;" + 
  "ExecFilterCommand.Description=Apply filter command. \r\n" + 
    "Usage: ExecFilterCommand COMMAND\r\n"+ 
    "  COMMAND - command to execute. %1 in the command is replaced with the filename.;" + 
  "ExecFilterCommand.ArgumentsRequired;" + 
  "Tokenize.MenuCaption=Tokenize...;" + 
  "Tokenize.Description=Tokenize selection. \r\n" + 
    "Usage: Tokenize PATTERNS\r\n" + 
    "  PATTERNS - regular expression for tokenizing. (e.g. [^\\w]+);" + 
  "Tokenize.ArgumentsRequired;" + 
  "Tokenize.Arguments=[^\\w]+;" + 
  "Trim.MenuCaption=Trim Spaces;" + 
  "Trim.Description=Trim spaces;" + 
  "SelectColumns.MenuCaption=Select Columns...;" + 
  "SelectColumns.Description=Select some columns.\r\n" + 
    "Usage: SelectColumns RANGES\r\n" + 
    "   or: SelectColumns [-v] [-i] [-g] -e PATTERNS\r\n" + 
    "  RANGES   - list of column ranges to select. (e.g. -3,5-10,30-)\r\n" + 
    "  PATTERNS - regular expression\r\n" +  
    "  -v - select non-matching columns\r\n" +  
    "  -i - ignore case\r\n" +  
    "  -g - enable global flag\r\n" +  
    "  -e - use PATTERNS for matching;" + 
  "SelectColumns.ArgumentsRequired;" + 
  "SelectLines.MenuCaption=Select Lines...;" + 
  "SelectLines.Description=Select some lines.\r\n" +  
    "Usage: SelectLines RANGES\r\n" +  
    "   or: SelectLines [-v] [-i] -e PATTERNS\r\n" +  
    "  RANGES   - list of line ranges to select. (e.g. -3,5-10,30-)\r\n" +  
    "  PATTERNS - regular expression\r\n" +  
    "  -v - select non-matching lines\r\n" +  
    "  -i - ignore case\r\n" +  
    "  -e - use PATTERNS for matching;" + 
  "SelectLines.ArgumentsRequired;" + 
  "ReverseColumns.MenuCaption=Reverse Columns;" + 
  "ReverseColumns.Description=Reverse columns;" + 
  "ReverseLines.MenuCaption=Reverse Lines;" + 
  "ReverseLines.Description=Reverse lines;" + 
  "Replace.MenuCaption=Replace...;" + 
  "Replace.Description=Replace text with another text.\r\n" +  
    "Usage: Replace [-i] [-e] FIND REPLACE\r\n" +  
    "  FIND    - text to find\r\n" +  
    "  REPLACE - text to replace\r\n" +  
    "  -i - ignore case (only for -e)\r\n" +  
    "  -e - treat the specified text as a regular expression;" + 
  "Replace.ArgumentsRequired;";
}

function get_PluginArguments() {
  return arguments;
}

function put_PluginArguments(NewValue) {
  arguments = NewValue;
}

function get_PluginVariables() {
  return variables.join("\0");
}

function put_PluginVariables(NewValue) {
  variables = NewValue.split("\0");
}

function regRead(Key, DefaultValue) {
  return mergeApp.GetOption(Key, DefaultValue);
}

function regWrite(Key, Value, TypeNm) {
  mergeApp.SaveOption(Key, (TypeNm === "REG_DWORD") ? parseInt(Value) : String(Value));
}

function ReplaceVariables(str) {
  var newstr;
  var pos = 0;
  while (true) {
    var foundpos = str.indexOf("%", pos);
    if (foundpos > 0) {
      var ch = str.charAt(foundpos + 1);
      if (ch === "%") {
        newstr = newstr + "%";
        pos = foundpos + 2;
      } else if (!isNaN(ch)) {
        newstr = newstr + str.substr(pos, foundpos - pos);
        if (parseInt(ch) < variables.length) {
          newstr = newstr + variables(parseInt(ch));
        }
        pos = foundpos + 2;
      } else {
        newstr = newstr + str.substr(pos, foundpos - pos + 1);
        pos = foundpos + 1;
      }
  } else {
      newstr = newstr + str.substr(pos);
      break;
    }
  }
  return newstr;
}

function IsFirstArgumentEmpty() {
  return (arguments.match(/^\s*$/) !== null);
}

function ParseArguments(args) {
  var ary = new Array();
  var token = "";
  var argsLen = args.length;
  var inQuotes = false;
  for (var i = 0; i < argsLen; i++) {
    var ch = args.charAt(i);
    if (!inQuotes) {
      if (ch === " " || ch === "\t") {
        if (token.length > 0) {
          ary.push(token);
          token = ""
        }
      } else if (ch === "\"") {
        inQuotes = true;
      } else {
        token += ch;
      }
    } else {
      if (ch === "\"") {
        if (i + 1 < argsLen) {
          if (args.charAt(i) === "\"") {
            token += ch;
          }
        }
        inQuotes = false;
      } else {
        token += ch;
      }
    }
  }
  if (Len(token) > 0) {
    ary.push(token);
    token = ""
  }
  return ary; 
}

function ParseRanges(rangeText) {
  var aryRanges = new Array();
  var ary = rangeText.split(",");
  for (var i = 0, j = 0; i < ary.length; i++) {
    var ary2 = ary[i].split("-");
    var rangeFrom = ""
    if (ary2.length > 0) {
      rangeFrom = ary2[0].replace(/^\s+|\s+$/g, "");
    }
    var rangeTo = rangeFrom;
    if (ary2 > 1) {
      rangeTo = ary2[1].replace(/^\s+|\s+$/g, "");
    }
    if (!isNan(rangeFrom) || !isNan(rangeTo)) {
      if (isNan(rangeFrom)) { rangeFrom = 1; }
      if (isNan(rangeTo)) { rangeTo = 1000000000; }
      if (parseFloat(rangeFrom) < 1 || parseFloat(rangeFrom) > 1000000000) { rangeFrom = 1; }
      if (parseFloat(rangeTo) < 1 || parseFloat(rangeTo) > 1000000000) { rangeTo = 1; }
      if (parseFloat(rangeFrom) > parseFloat(rangeTo)) { rangeTo = rangeFrom; }
      aryRanges.push([parseInt(rangeFrom), parseInt(rangeTo)]);
    }
  }
  return aryRanges;
}

function ParseSelectColumnsLinesArguments(args) {
  var rangesOrRegExps = new Array();
  var re;
  var argAry = ParseArguments(args);
  var invert = false;
  var flags = "";
  for (var i = 0; i < argAry.length; i++) {
    var isOption = false;
    if (argAry[i].length >= 2) {
      switch (argAry[i].charAt[0]) {
      case "-", "/":
        switch (argAry[i].charAt[1]) {
        case "e", "i", "g":
          isOption = true;
          if (!re) {
            re = new RegExp();
            rangesOrRegExps.push(re)
          }
          flags = "";
          if (argAry[i].indexOf("g") >= 0) {
            flags += "g";
          }
          if (argAry[i].indexOf("i") >= 0) {
            flags += "i";
          }
          break;
        case "v":
          isOption = true;
          invert = true;
          break;
        }
      }
      break;
    }
    if (!isOption) {
      if (!re) {
        pattern = argAry(i)
        re = null;
      } else {
        rangesOrRegExps.push(ParseRanges(argAry[i]))
        if (rangesOrRegExps(j) == 0) {
          rangesOrRegExps[rangesOrRegExps.length - 1] = new RegExp(argAry[i]);
        }
      }
    }
  }
  return { "rangesOrRegExps": rangesOrRegExps, "invert": invert };
}

function ParseReplaceArguments(args, regex, ignoreCase) {
  var patterns()
  var argAry
  var i, j
  var re
  var isOption
  re = Nothing
  argAry = ParseArguments(args)
  regex = false;
  ignoreCase = false;
  For i = 0 To SafeUBound(argAry)
    isOption = false;
    if (Len(argAry(i)) >= 2) {
      Select case Left(argAry(i), 1)
      case "-", "/"
        Select case Mid(argAry(i), 2, 1)
        case "e", "i"
          isOption = true;
          regex = true;
          if (InStr(argAry(i), "i") > 0) {
            ignoreCase = true;
          }
          break;
        }
        break;
      }
    }
    if (Not isOption) {
      Redim Preserve patterns(j)
      patterns(j) = argAry(i)
      j = j + 1
    }
  }
  ParseReplaceArguments = patterns
}

function Unescape(text) {
  var textLen
  var i
  var ch

  textLen = Len(text)
  i = 1
  Do While i <= textLen
    ch = Mid(text, i, 1)
    Select case ch
    case "\\"
      if (i <= textLen - 1) {
        i = i + 1
        ch = Mid(text, i, 1)
        Select case ch
        case "a"
          Unescape = Unescape + Chr(+H07)
        case "b"
          Unescape = Unescape + Chr(+H08)
        case "t"
          Unescape = Unescape + Chr(+H09)
        case "n"
          Unescape = Unescape + Chr(+H0A)
        case "v"
          Unescape = Unescape + Chr(+H0B)
        case "f"
          Unescape = Unescape + Chr(+H0C)
        case "r"
          Unescape = Unescape + Chr(+H0D)
        case "\\"
          Unescape = Unescape + "\\"
        default:
          Unescape = Unescape + "\\" + ch
        }
      } else {
        Unescape = Unescape + ch
      }
    default:
      Unescape = Unescape + ch
    }
    i = i + 1
  Loop
}

function SplitLines(text, eol) {
  var re, matches
  re = New RegExp
  re.Global = false;
  re.IgnoreCase = false;
  re.Pattern = "\r\n|\n|\r"
  matches = re.Execute(text)
  if (matches.Count > 0) {
    eol = matches(0).Value
  }
  SplitLines = Split(text, eol)
}

function PluginOnEvent(eventType, obj) {
  mergeApp = obj;
}

// transformation functions
function MakeUpper(Text) {
  return Text.toUpperCase();
}

function MakeLower(Text) {
  return Text.toLowerCase();
}

function ExecFilterCommand(Text) {
  var cmd;
  if (IsFirstArgumentEmpty()) {
    cmd = regRead(REGKEY_PATH + "ExecFilterCommand", "")
    cmd = mergeApp.InputBox("Enter filter command", "ExecFilterCommand", cmd)
    if (cmd !== "") {
      regWrite(REGKEY_PATH + "ExecFilterCommand", cmd, "REG_SZ");
    }
    cmd = ReplaceVariables(cmd)
  } else {
    cmd = arguments
  }
  if (cmd === "") {
    throw new Error(30001, "Canceled");
  }

  var path = wsh.ExpandEnvironmentStrings("%TEMP%\\_winmerge_addin_temp_.txt");
  var fso = new ActiveXObject("Scripting.FileSystemObject")
  try {
    var ts = fso.CreateTextFile(path)
    ts.Write(Text);
    ts.Close();
  } catch (e) {
    throw new Error(30001, "Failed to create the file '" + path + "':" + e.message);
  }
  var result = "";
  try {
    var exe = wsh.Exec("cmd /c type \"" + path + "\" | " + cmd + " 2>&1")
    while (!exe.StdOut.AtEndOfStream) {
      result += exe.StdOut.ReadLine + "\r\n";
    }
  } catch (e) {
    throw new Error(30001, "Failed to execute the command '" + cmd + "':" + e.message);
  } finally {
    fso.DeleteFile(path);
  }
  return result;
}

function SelectColumns(Text) {
  var args, ranges, regexpStr
  var matches, m
  var lines, eol, line
  var i, j, k
  var rangesOrRegExps
  var invert
  if (IsFirstArgumentEmpty()) {
    args = regRead(REGKEY_PATH + "SelectColumns", "");
    args = mergeApp.InputBox("Enter the list of column ranges to select (e.g. -3,5-10,30-)\r\nor regular expression:", "SelectColumns", args);
    if (args !== "") {
      regWrite(REGKEY_PATH + "SelectColumns", args, "REG_SZ");
    }
  } else {
    args = arguments;
  }
  if (args === "") {
    throw new Error(30001, "Canceled");
  }
  lines = SplitLines(Text, eol)
  rangesOrRegExps = ParseSelectColumnsLinesArguments(args, invert)
  For i = 0 To SafeUBound(lines)
    line = ""
    For j = 0 To SafeUBound(rangesOrRegExps)
      if (IsArray(rangesOrRegExps(j))) {
        For k = 0 To SafeUBound(rangesOrRegExps(j))
          if (rangesOrRegExps(j)(k)(0) <= Len(lines(i))) {
            line = line + Mid(lines(i), rangesOrRegExps(j)(k)(0), rangesOrRegExps(j)(k)(1) - rangesOrRegExps(j)(k)(0) + 1)
          }
        }
      } else {
        if (Not invert) {
          matches = rangesOrRegExps(j).Execute(lines(i))
          For Each m In matches
            line = line + m.Value
          }
        } else {
          line = line + rangesOrRegExps(j).Replace(lines(i), "")
        }
      }
    }
    lines(i) = line
  }
  SelectColumns = Join(lines, eol)
}

function SelectLines(Text) {
  var args, ranges
  var matches, rangesOrRegExps
  var lines, newlines(), eol
  var i, j, k, l
  var max
  var matched
  var invert
  if (IsFirstArgumentEmpty()) {
    args = regRead(REGKEY_PATH + "SelectLines", "")
    args = mergeApp.InputBox("Enter the list of line ranges to select (e.g. -3,5-10,30-)\r\nor regular expression:", "SelectLines", args)
    if (args !== "") {
      regWrite(REGKEY_PATH + "SelectLines", args, "REG_SZ");
    }
  } else {
    args = arguments
  }
  if (args === "") {
    throw new Error(30001, "Canceled");
  }
  lines = SplitLines(Text, eol)
  l = 0
  rangesOrRegExps = ParseSelectColumnsLinesArguments(args, invert)
  For i = 0 To SafeUBound(rangesOrRegExps)
    if (IsArray(rangesOrRegExps(i))) {
      For j = 0 To SafeUBound(rangesOrRegExps(i))
        max =rangesOrRegExps(i)(j)(1) - 1 
        if (max > SafeUBound(lines)) { max = SafeUBound(lines)
        For k = rangesOrRegExps(i)(j)(0) - 1 To max
          if (k <= SafeUBound(lines)) {
            ReDim Preserve newlines(l)
            newlines(l) = lines(k)
            l = l + 1
          }
        }
      }
    } else {
      For j = 0 To SafeUBound(lines)
        matched = rangesOrRegExps(i).Test(lines(j))
        if (invert) { matched = Not matched
        if (matched) {
          ReDim Preserve newlines(l)
          newlines(l) = lines(j)
          l = l + 1
        }
      }
    }
  }
  if (SafeUBound(lines) >= 0) {
    if (lines(UBound(lines)) = "") {
      if (SafeUBound(newlines) >= 0) {
        if (newlines(UBound(newlines)) !== "") {
          ReDim Preserve newlines(l)
          newlines(l) = ""
          l = l + 1
        }
      }
    }
  }
  SelectLines = Join(newlines, eol)
}

function replacei(text, find, replace, ignorecase) {
  if (!ignorecase)
    return text.split(find).join(replace);
  var textLower = text.toLowerCase();
  var findLower = find.toLowerCase();
  var pos = textLower.length;
  while (pos >= 0 && (pos = textLower.lastIndexOf(findLower, pos)) >= 0) {
    text = text.substr(0, pos) + replace + text.substr(pos + findLower.length);
    pos--;
  }
  return text;
}

function ReplaceText(Text) {
  var args;
  var result = Text;
  if (IsFirstArgumentEmpty()) {
    args = regRead(REGKEY_PATH + "Replace", "")
    args = mergeApp.InputBox("Enter the search text and replacement text:", "Replace", args)
    if (args !== "") {
      regWrite(REGKEY_PATH + "Replace", args, "REG_SZ");
    }
  } else {
    args = arguments
  }
  if (args === "") {
    throw new Error(30001, "Canceled");
  }
  var parseResult = ParseReplaceArguments(args);
  var patterns = parseResult.patterns;
  var regex = parseResult.regex;
  var ignoreCase = parseResult.ignoreCase;
  if (regex) {
    for (var i = 0; i < patterns.length; i += 2) {
      var re = new RegExp(patterns[i],ignoreCase ?  "gmi" : "gm");
      if (i + 1 < patterns.length) {
        result = result.replace(re, Unescape(patterns(i + 1)));
      } else {
        result = result.relace(re, result, "");
      }
    }
  } else {
    for (var i = 0; i < patterns.length; i += 2) {
      if (i + 1 < patterns.length) {
        result = replacei(patterns(i), patterns(i + 1));
      } else {
        result = replacei(patterns(i), "");
      }
    }
  }
  return result;
}

// port from WinMerge2011
function Tokenize(Text) {
  var pattern;
  if (IsFirstArgumentEmpty()) {
    pattern = regRead(REGKEY_PATH + "Tokenize", "");
    pattern = mergeApp.InputBox("Enter regex to tokenize (e.g. [^\\w]+):", "Tokenize", pattern);
    if (pattern !== "") {
      regWrite(REGKEY_PATH + "Tokenize", pattern, "REG_SZ");
    }
  } else {
    pattern = arguments;
  }
  if (args === "") {
    throw new Error(30001, "Canceled");
  }
  var re = new RegExp(pattern, "gi");
  return Text.replace(re, "\r\n");
}

function RemoveDuplicates(Text) {
  var eol = Text.match(/\r\n|\n|\r/);
  var lines = Text.split(eol);
  var newlines = new Array();
  var dic = {};
  var lasteol = false;

  if (!lines[lines.length - 1]) {
    lines.pop();
    lasteol = true;
  }
  for (var i = 0, j = 0; i < lines.length; i++) {
    var line = lines[i];
    if (typeof dic[line] === 'undefined') {
      dic[line] = 1;
      newlines[j] = line;
      j++;
    }
  }
  if (lasteol)
    newlines.push("");
  return newlines.join(eol);
}

function CountDuplicates(Text) {
  var eol = Text.match(/\r\n|\n|\r/);
  var lines = Text.split(eol);
  var newlines = new Array();
  var dic = {};

  if (!lines[lines.length - 1]) {
    lines.pop();
  }
  
  for (var i = 0; i < lines.length; i++) {
    var line = lines[i];
    if (typeof dic[line] === 'undefined') {
      dic[line] = 1;
      newlines[j] = line;
      j++;
    } else {
      dic[line]++;
    }
  }
  var j = 0;
  for (var line in dic) {
    newlines[j] = line + '\t' + dic[line];
    j++;
  }
  if (eol)
    newlines[j] = "";
  return newlines.join(eol);
}

function ReverseColumns(Text) {
  var eol = Text.match(/\r\n|\n|\r/);
  var lines = Text.split(eol);
  var lasteol = false;
  if (!lines[lines.length - 1]) {
    lines.pop();
    lasteol = true;
  }
  for (var i = 0; i < lines.length; i++) {
    var line = lines[i];
    var newline = "";
    for (var j = 0; j < line.length; j++)
      newline += line.substr(line.length - j - 1, 1);
    lines[i] = newline;
  }
  if (lasteol)
    lines.push("");
  return lines.join(eol);
}

function ReverseLines(Text) {
  var eol = Text.match(/\r\n|\n|\r/);
  var lines = Text.split(eol);
  var lasteol = false;
  if (!lines[lines.length - 1]) {
    lines.pop();
    lasteol = true;
  }
  var m = parseInt(lines.length / 2);
  for (var i = 0; i < m; i++) {
    var line = lines[i];
    lines[i] = lines[lines.length - i - 1]
    lines[lines.length - i - 1] = line;
  }
  if (lasteol)
    lines.push("");
  return lines.join(eol);
}

function SortAscending(Text) {
  var eol = Text.match(/\r\n|\n|\r/);
  var lines = Text.split(eol);

  if (lines.length == 1) {
    return Text;
  } else if (lines[lines.length - 1] == "") {
    lines.pop();
    return lines.sort().join(eol) + eol;
  } else {
    return lines.sort().join(eol);
  }
}

function SortDescending(Text) {
  var eol = Text.match(/\r\n|\n|\r/);
  var lines = Text.split(eol);

  if (lines.length == 1) {
    return Text;
  } else if (lines[lines.length - 1] == "") {
    lines.pop();
    lines.sort(function(a, b) { return a < b ? 1 : -1; });
    return lines.join(eol) + eol;
  } else {
    return lines.sort(function(a, b) { return a < b ? 1 : -1; }).join(eol);
  }
}

function Trim(Text) {
  var eol = Text.match(/\r\n|\n|\r/);
  var lines = Text.split(eol);
  for (var i = 0; i < lines.length; i++) {
    lines[i] = lines[i].replace(/^\s+|\s+$/g, "");
  }
  return lines.join(eol);
}

</script>

</scriptlet>
